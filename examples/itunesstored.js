/*

	The script was autorenerated by MEDUZA SSL unpinning tool (https://github.com/kov4l3nko/MEDUZA)

*/

var certs = {"f9829de3330b853d75340d21da2cbb5e2a99615921b4996dc67ed21b25b8c9ce": [48, 130, 8, 8, 48, 130, 6, 240, 160, 3, 2, 1, 2, 2, 16, 15, 29, 167, 196, 166, 245, 27, 63, 93, 249, 10, 157, 19, 136, 84, 16, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 48, 121, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 23, 48, 21, 6, 3, 85, 4, 10, 19, 14, 68, 105, 103, 105, 67, 101, 114, 116, 44, 32, 73, 110, 99, 46, 49, 25, 48, 23, 6, 3, 85, 4, 11, 19, 16, 119, 119, 119, 46, 100, 105, 103, 105, 99, 101, 114, 116, 46, 99, 111, 109, 49, 54, 48, 52, 6, 3, 85, 4, 3, 19, 45, 68, 105, 103, 105, 67, 101, 114, 116, 32, 83, 72, 65, 50, 32, 69, 120, 116, 101, 110, 100, 101, 100, 32, 86, 97, 108, 105, 100, 97, 116, 105, 111, 110, 32, 83, 101, 114, 118, 101, 114, 32, 67, 65, 45, 51, 48, 30, 23, 13, 50, 48, 48, 55, 51, 49, 48, 48, 48, 48, 48, 48, 90, 23, 13, 50, 49, 48, 56, 48, 49, 49, 50, 48, 48, 48, 48, 90, 48, 129, 219, 49, 29, 48, 27, 6, 3, 85, 4, 15, 12, 20, 80, 114, 105, 118, 97, 116, 101, 32, 79, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110, 49, 19, 48, 17, 6, 11, 43, 6, 1, 4, 1, 130, 55, 60, 2, 1, 3, 19, 2, 85, 83, 49, 27, 48, 25, 6, 11, 43, 6, 1, 4, 1, 130, 55, 60, 2, 1, 2, 19, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 17, 48, 15, 6, 3, 85, 4, 5, 19, 8, 67, 48, 56, 48, 54, 53, 57, 50, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 8, 19, 10, 67, 97, 108, 105, 102, 111, 114, 110, 105, 97, 49, 18, 48, 16, 6, 3, 85, 4, 7, 19, 9, 67, 117, 112, 101, 114, 116, 105, 110, 111, 49, 19, 48, 17, 6, 3, 85, 4, 10, 19, 10, 65, 112, 112, 108, 101, 32, 73, 110, 99, 46, 49, 42, 48, 40, 6, 3, 85, 4, 3, 19, 33, 100, 111, 119, 110, 108, 111, 97, 100, 100, 105, 115, 112, 97, 116, 99, 104, 46, 105, 116, 117, 110, 101, 115, 46, 97, 112, 112, 108, 101, 46, 99, 111, 109, 48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 164, 117, 1, 30, 21, 52, 36, 56, 19, 65, 239, 112, 13, 38, 34, 253, 57, 182, 171, 58, 22, 141, 3, 53, 203, 227, 164, 170, 196, 113, 122, 49, 195, 103, 14, 95, 205, 85, 243, 0, 205, 129, 240, 101, 192, 101, 150, 69, 61, 110, 93, 61, 134, 19, 104, 6, 76, 59, 91, 138, 208, 221, 147, 151, 70, 96, 72, 187, 91, 87, 163, 213, 71, 152, 103, 157, 83, 114, 105, 223, 150, 165, 100, 224, 11, 151, 46, 105, 248, 209, 129, 147, 186, 69, 113, 158, 31, 119, 182, 39, 154, 230, 7, 7, 120, 45, 165, 173, 203, 249, 3, 0, 200, 47, 240, 218, 118, 64, 187, 28, 83, 206, 253, 108, 78, 6, 70, 28, 253, 193, 69, 63, 166, 170, 92, 116, 110, 67, 222, 54, 134, 25, 93, 220, 239, 195, 68, 46, 240, 142, 91, 18, 185, 127, 47, 83, 8, 54, 173, 48, 213, 15, 61, 25, 82, 171, 103, 144, 139, 229, 10, 16, 122, 237, 145, 101, 167, 29, 70, 45, 163, 243, 199, 93, 188, 250, 105, 161, 243, 128, 121, 224, 217, 65, 102, 230, 12, 44, 247, 30, 139, 20, 91, 129, 227, 107, 204, 238, 164, 47, 136, 67, 48, 235, 59, 102, 52, 47, 51, 211, 245, 255, 83, 194, 240, 65, 99, 226, 62, 239, 23, 10, 105, 167, 198, 122, 236, 148, 129, 86, 153, 252, 150, 20, 207, 23, 179, 101, 215, 244, 113, 206, 236, 173, 40, 67, 2, 3, 1, 0, 1, 163, 130, 4, 39, 48, 130, 4, 35, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 207, 133, 241, 188, 56, 24, 120, 58, 85, 51, 244, 86, 202, 192, 105, 173, 119, 110, 187, 147, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 177, 13, 53, 193, 132, 138, 10, 250, 74, 219, 136, 158, 133, 222, 252, 45, 69, 34, 232, 215, 48, 44, 6, 3, 85, 29, 17, 4, 37, 48, 35, 130, 33, 100, 111, 119, 110, 108, 111, 97, 100, 100, 105, 115, 112, 97, 116, 99, 104, 46, 105, 116, 117, 110, 101, 115, 46, 97, 112, 112, 108, 101, 46, 99, 111, 109, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 5, 160, 48, 29, 6, 3, 85, 29, 37, 4, 22, 48, 20, 6, 8, 43, 6, 1, 5, 5, 7, 3, 1, 6, 8, 43, 6, 1, 5, 5, 7, 3, 2, 48, 129, 165, 6, 3, 85, 29, 31, 4, 129, 157, 48, 129, 154, 48, 75, 160, 73, 160, 71, 134, 69, 104, 116, 116, 112, 58, 47, 47, 99, 114, 108, 51, 46, 100, 105, 103, 105, 99, 101, 114, 116, 46, 99, 111, 109, 47, 68, 105, 103, 105, 67, 101, 114, 116, 83, 72, 65, 50, 69, 120, 116, 101, 110, 100, 101, 100, 86, 97, 108, 105, 100, 97, 116, 105, 111, 110, 83, 101, 114, 118, 101, 114, 67, 65, 45, 51, 46, 99, 114, 108, 48, 75, 160, 73, 160, 71, 134, 69, 104, 116, 116, 112, 58, 47, 47, 99, 114, 108, 52, 46, 100, 105, 103, 105, 99, 101, 114, 116, 46, 99, 111, 109, 47, 68, 105, 103, 105, 67, 101, 114, 116, 83, 72, 65, 50, 69, 120, 116, 101, 110, 100, 101, 100, 86, 97, 108, 105, 100, 97, 116, 105, 111, 110, 83, 101, 114, 118, 101, 114, 67, 65, 45, 51, 46, 99, 114, 108, 48, 75, 6, 3, 85, 29, 32, 4, 68, 48, 66, 48, 55, 6, 9, 96, 134, 72, 1, 134, 253, 108, 2, 1, 48, 42, 48, 40, 6, 8, 43, 6, 1, 5, 5, 7, 2, 1, 22, 28, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 100, 105, 103, 105, 99, 101, 114, 116, 46, 99, 111, 109, 47, 67, 80, 83, 48, 7, 6, 5, 103, 129, 12, 1, 1, 48, 129, 138, 6, 8, 43, 6, 1, 5, 5, 7, 1, 1, 4, 126, 48, 124, 48, 36, 6, 8, 43, 6, 1, 5, 5, 7, 48, 1, 134, 24, 104, 116, 116, 112, 58, 47, 47, 111, 99, 115, 112, 46, 100, 105, 103, 105, 99, 101, 114, 116, 46, 99, 111, 109, 48, 84, 6, 8, 43, 6, 1, 5, 5, 7, 48, 2, 134, 72, 104, 116, 116, 112, 58, 47, 47, 99, 97, 99, 101, 114, 116, 115, 46, 100, 105, 103, 105, 99, 101, 114, 116, 46, 99, 111, 109, 47, 68, 105, 103, 105, 67, 101, 114, 116, 83, 72, 65, 50, 69, 120, 116, 101, 110, 100, 101, 100, 86, 97, 108, 105, 100, 97, 116, 105, 111, 110, 83, 101, 114, 118, 101, 114, 67, 65, 45, 51, 46, 99, 114, 116, 48, 9, 6, 3, 85, 29, 19, 4, 2, 48, 0, 48, 130, 1, 245, 6, 10, 43, 6, 1, 4, 1, 214, 121, 2, 4, 2, 4, 130, 1, 229, 4, 130, 1, 225, 1, 223, 0, 118, 0, 246, 92, 148, 47, 209, 119, 48, 34, 20, 84, 24, 8, 48, 148, 86, 142, 227, 77, 19, 25, 51, 191, 223, 12, 47, 32, 11, 204, 78, 241, 100, 227, 0, 0, 1, 115, 166, 196, 229, 61, 0, 0, 4, 3, 0, 71, 48, 69, 2, 33, 0, 159, 215, 129, 65, 108, 140, 30, 57, 73, 18, 41, 77, 106, 205, 48, 254, 101, 200, 83, 204, 78, 136, 56, 89, 83, 253, 210, 9, 29, 237, 12, 201, 2, 32, 81, 178, 148, 155, 58, 174, 98, 223, 213, 95, 197, 115, 191, 234, 104, 250, 80, 197, 149, 5, 239, 170, 122, 85, 198, 16, 5, 186, 153, 159, 103, 203, 0, 118, 0, 92, 220, 67, 146, 254, 230, 171, 69, 68, 177, 94, 154, 212, 86, 230, 16, 55, 251, 213, 250, 71, 220, 161, 115, 148, 178, 94, 230, 246, 199, 14, 202, 0, 0, 1, 115, 166, 196, 229, 99, 0, 0, 4, 3, 0, 71, 48, 69, 2, 32, 13, 36, 172, 251, 193, 80, 188, 105, 44, 233, 224, 190, 105, 31, 159, 0, 67, 166, 207, 58, 62, 218, 231, 195, 14, 188, 137, 198, 53, 5, 222, 147, 2, 33, 0, 239, 44, 22, 225, 8, 25, 48, 86, 143, 170, 60, 210, 11, 61, 102, 56, 230, 73, 4, 90, 231, 178, 24, 128, 81, 129, 231, 7, 236, 75, 176, 138, 0, 118, 0, 86, 20, 6, 154, 47, 215, 194, 236, 211, 245, 225, 189, 68, 178, 62, 199, 70, 118, 185, 188, 153, 17, 92, 192, 239, 148, 152, 85, 214, 137, 208, 221, 0, 0, 1, 115, 166, 196, 231, 68, 0, 0, 4, 3, 0, 71, 48, 69, 2, 33, 0, 236, 26, 175, 89, 220, 132, 134, 31, 175, 146, 82, 80, 160, 209, 215, 220, 78, 219, 52, 211, 219, 206, 149, 113, 6, 158, 96, 254, 223, 81, 68, 251, 2, 32, 13, 37, 52, 89, 157, 30, 205, 237, 40, 129, 241, 91, 107, 84, 216, 53, 155, 226, 149, 28, 151, 205, 181, 158, 38, 98, 217, 182, 108, 66, 232, 162, 0, 117, 0, 164, 185, 9, 144, 180, 24, 88, 20, 135, 187, 19, 162, 204, 103, 112, 10, 60, 53, 152, 4, 249, 27, 223, 184, 227, 119, 205, 14, 200, 13, 220, 16, 0, 0, 1, 115, 166, 196, 232, 51, 0, 0, 4, 3, 0, 70, 48, 68, 2, 32, 5, 97, 88, 121, 141, 54, 167, 76, 248, 140, 219, 184, 95, 97, 146, 141, 201, 213, 103, 116, 244, 232, 162, 90, 251, 98, 23, 160, 3, 199, 70, 238, 2, 32, 9, 43, 234, 178, 145, 169, 132, 180, 150, 46, 131, 179, 237, 84, 211, 151, 226, 248, 120, 210, 243, 164, 35, 125, 106, 21, 148, 250, 193, 161, 68, 120, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 11, 5, 0, 3, 130, 1, 1, 0, 72, 7, 61, 219, 233, 37, 169, 36, 96, 12, 96, 80, 2, 118, 251, 48, 25, 45, 96, 255, 121, 253, 245, 138, 183, 224, 51, 132, 29, 77, 62, 85, 10, 116, 67, 75, 255, 248, 49, 243, 153, 213, 140, 46, 192, 121, 174, 83, 71, 79, 44, 45, 10, 88, 255, 249, 48, 108, 107, 22, 90, 130, 247, 6, 225, 174, 144, 212, 205, 129, 44, 231, 125, 122, 228, 139, 104, 98, 1, 84, 85, 218, 164, 31, 28, 93, 155, 252, 180, 83, 206, 67, 169, 234, 198, 232, 249, 113, 126, 97, 147, 244, 212, 108, 28, 154, 122, 34, 117, 144, 37, 28, 186, 213, 203, 176, 82, 158, 81, 73, 179, 28, 112, 62, 48, 163, 74, 160, 109, 188, 194, 126, 150, 209, 64, 67, 119, 189, 99, 101, 203, 48, 0, 38, 160, 79, 151, 163, 0, 213, 52, 184, 174, 213, 104, 64, 14, 207, 99, 94, 57, 240, 98, 197, 61, 122, 50, 149, 196, 23, 105, 182, 154, 61, 134, 121, 92, 201, 13, 163, 32, 68, 233, 104, 107, 97, 9, 116, 53, 42, 50, 189, 154, 197, 184, 59, 12, 122, 151, 85, 228, 229, 134, 94, 77, 96, 153, 115, 221, 161, 94, 33, 235, 23, 89, 195, 216, 155, 226, 209, 91, 131, 183, 4, 75, 169, 87, 126, 179, 253, 219, 93, 186, 30, 4, 169, 215, 248, 227, 194, 232, 248, 25, 197, 5, 175, 254, 192, 30, 215, 249, 62, 8, 164, 32, 188]};

var domains = {
    "downloaddispatch.itunes.apple.com": "f9829de3330b853d75340d21da2cbb5e2a99615921b4996dc67ed21b25b8c9ce"
};

// Uncomment next two lines for testing purposes only
// var certs = {};
// var domains = {};

// Allocated certs
var allocatedCerts = {};

// Allocate certificates
console.log("[*] Allocating memory for certs...");
for (var hash in certs) {
    var bytes = certs[hash];
    var certBytes = Memory.alloc(bytes.length);
    certBytes.writeByteArray(bytes);
    allocatedCerts[hash] = {"address": certBytes, "length": bytes.length};
    console.log("[*] Just allocated a memory for the cert with the raw bytes SHA256 hash: " + hash);
}

// Get SecCertificateCreateWithBytes pointer
console.log("[*] Looking for SecCertificateCreateWithBytes()...");
var SecCertificateCreateWithBytes_prt = Module.findExportByName("Security", "SecCertificateCreateWithBytes");

// SecCertificateCreateWithBytes()
var SecCertificateCreateWithBytes = new NativeFunction(
    SecCertificateCreateWithBytes_prt, "pointer", ["pointer", "pointer", "uint64"]
);

// SecCertificateCopyCommonName()
console.log("[*] Looking for SecCertificateCopyCommonName()...");
var SecCertificateCopyCommonName = new NativeFunction(
    Module.findExportByName("Security", "SecCertificateCopyCommonName"), "uint64", ["pointer", "pointer"]
);

// CFStringGetCStringPtr()
console.log("[*] Looking for CFStringGetCStringPtr()...");
var kCFStringEncodingASCII = 0x600;
var CFStringGetCStringPtr = new NativeFunction(
    Module.findExportByName("CoreFoundation", "CFStringGetCStringPtr"), "pointer", ["pointer", "uint64"]
);

// Catch the certificates
function spoofCertificates() {
    // Hook SecCertificateCreateWithBytes()
    console.log("[*] Hooking SecCertificateCreateWithBytes()...");
    Interceptor.replace(SecCertificateCreateWithBytes_prt, new NativeCallback(function(something, certAddress, certLength) {
        // Get the certificate CN
        var result = SecCertificateCreateWithBytes(something, certAddress, certLength);
        var cnCFString_prt = Memory.alloc(8);
        SecCertificateCopyCommonName(result, cnCFString_prt);
        var strPtr = cnCFString_prt.readPointer();
        if (strPtr == null) return result;
        var cn = CFStringGetCStringPtr(cnCFString_prt.readPointer(), kCFStringEncodingASCII).readCString();
        if (cn == null) return result;
        // Check the cn and replace the certificate, if it's required
        console.log("[*] Intercepted certificate with CN: " + cn);
        if ((cn.indexOf(" ") < 0) && (cn.indexOf(".") > -1)) {
            if (cn in domains) {
                var hash = domains[cn];
                var certBytes = allocatedCerts[hash]["address"];
                var certLength = allocatedCerts[hash]["length"];
                // Do spoof the certificate
                console.log("[*] Spoofing the cert with CN: " + cn + ", the original cert raw bytes SHA256 hash: " + hash + "...");
                return SecCertificateCreateWithBytes(something, certBytes, certLength);
            } else {
                // It's a domain, but it was not spoofed
                console.log("[!] The domain with CN: " + cn + " was NOT spoofed! SSL unpinning may be particular!");
            }
        }
        // Return the certificate
        return result;
    }, "pointer", ["pointer", "pointer", "uint64"]));
    console.log("[*] SecCertificateCreateWithBytes() hooked!");
}
spoofCertificates();